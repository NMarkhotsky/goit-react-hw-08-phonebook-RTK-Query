{"version":3,"file":"static/js/280.61432481.chunk.js","mappings":"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","sources":["redux/contacts/selector.js","components/ContactForm/ContactForm.styled.jsx","components/Utils/Validate.js","components/ContactForm/ContactForm.jsx","components/ContactFilter/Filter.styled.jsx","components/ContactFilter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","hooks/useContacts.js","components/GlobalStyle/Container.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filters;\n\nexport const selectVisibleContact = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n","import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 12px;\n`;\n\nexport const FieldInput = styled.input`\n  padding: 5px;\n  margin-top: 5px;\n\n  border-radius: 5px;\n`;\n\nexport const Button = styled.button`\n  background-color: #21c53c;\n  padding: 8px;\n  font-size: 12px;\n  border: none;\n  border-radius: 5px;\n  color: #ffffff;\n\n  :hover {\n    background-color: #0c9422;\n  }\n  :active {\n    background-color: #056e17;\n  }\n`;\n","import * as Yup from 'yup';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string().min(2).max(20).required(''),\n  number: Yup.string().required(''),\n});\n\nconst phoneNumberMask = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n];\n\nexport { ContactSchema, phoneNumberMask };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { Form, Label, Button } from './ContactForm.styled';\nimport { ContactSchema, phoneNumberMask } from 'components/Utils/Validate';\nimport MaskedInput from 'react-text-mask';\nimport toast from 'react-hot-toast';\n\nexport const ContactForm = () => {\n  const contact = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, action) => {\n        const duplicateName = contact.find(\n          ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n        );\n        return duplicateName\n          ? toast(`${values.name} is already in contacts.`, { icon: '⚠️' })\n          : (dispatch(addContact(values)),\n            toast.success(`${values.name} added to contacts.`),\n            action.resetForm());\n      }}\n    >\n      <Form>\n        <Label>\n          Name*\n          <Field\n            type=\"text\"\n            name=\"name\"\n            as=\"input\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n        </Label>\n        <ErrorMessage name=\"name\" component={'span'} />\n        <Label>\n          Number*\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            as=\"input\"\n            component={({ field }) => (\n              <MaskedInput\n                {...field}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"The phone number must contain 7 digits\"\n                mask={phoneNumberMask}\n              />\n            )}\n          />\n        </Label>\n        <ErrorMessage name=\"number\" component={'span'} />\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const P = styled.p`\n  margin-bottom: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filteredContact } from 'redux/contacts/filtersSlice';\nimport { Label, P } from './Filter.styled';\nimport { selectFilters } from 'redux/contacts/selector';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilters);\n  const dispatch = useDispatch();\n\n  const changeFilter = ({ target: { value } }) => {\n    dispatch(filteredContact(value));\n  };\n\n  return (\n    <Label>\n      <P>Find contacts by name</P>\n      <input type=\"text\" value={filter} onChange={changeFilter} />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const Thumb = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const Button = styled.button`\n  padding: 5px;\n  background-color: #b70a0a;\n\n  font-size: 12px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  color: #ffffff;\n\n  :hover {\n    background-color: #8e0000;\n  }\n  :active {\n    background-color: #690000;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button, Item, Thumb } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\n\nexport const ListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Item>\n      <Thumb>\n        <p>{name}: </p>\n      </Thumb>\n      <Thumb>\n        <p>{number}</p>\n        <Button\n          type=\"button\"\n          onClick={() => {\n            dispatch(deleteContact(id));\n            toast.success(`${name} is deleted`);\n          }}\n        >\n          Delete\n        </Button>\n      </Thumb>\n    </Item>\n  );\n};\n\nListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n","import { useContacts } from 'hooks/useContacts';\nimport { ListItem } from '../ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useContacts();\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ListItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContact } from 'redux/contacts/selector';\n\nexport const useContacts = () => useSelector(selectVisibleContact);\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  padding: 20px;\n  max-width: 768px;\n  border-radius: 20px;\n\n  background-color: #1a202c89;\n  backdrop-filter: blur(5px);\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/ContactFilter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selectError, selectIsLoading } from 'redux/contacts/selector';\nimport { ContactsLoader } from 'components/Loader/Loader';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container } from 'components/GlobalStyle/Container.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && !error && <ContactsLoader />}\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilters","filters","selectVisibleContact","createSelector","filter","contact","name","toLowerCase","includes","Form","styled","FormikForm","Label","Button","ContactSchema","Yup","shape","min","max","required","number","phoneNumberMask","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","action","find","toast","icon","addContact","resetForm","type","as","pattern","title","component","field","mask","P","Filter","value","onChange","target","filteredContact","Item","Thumb","ListItem","id","onClick","deleteContact","List","ContactList","map","Container","Contacts","useEffect","fetchContacts"],"sourceRoot":""}